optimistic2025_med_10y_50_Neo_tx   <- optimistic2025_med_10y_50_Neo[Indicator == "sum_tx" & Group == "All"]$UR
optimistic2025_med_10y_50_Neo_inc  <- optimistic2025_med_10y_50_Neo[Indicator == "sum_inc" & Group == "All"]$UR
optimistic2025_med_10y_50_Neo_mort <- optimistic2025_med_10y_50_Neo[Indicator == "sum_mort" & Group == "All"]$UR
optimistic2025_med_10y_50_Neo_IRR  <- optimistic2025_med_10y_50_Neo[Indicator == "inc_rate" & Group == "All"]$UR
optimistic2025_med_10y_50_Neo_MRR  <- optimistic2025_med_10y_50_Neo[Indicator == "mort_rate" & Group == "All"]$UR
### Immediate Scale-up 75%
optimistic2025_med_10y_75_AdoAdu <- epi_estimates[Runtype == "optimistic2025_med_10y_75_PPI_AdoAdu" & Year == 2050 & AgeGrp == "[0,99]"]
optimistic2025_med_10y_75_AdoAdu_tx   <- optimistic2025_med_10y_75_AdoAdu[Indicator == "sum_tx" & Group == "All"]$UR
optimistic2025_med_10y_75_AdoAdu_inc  <- optimistic2025_med_10y_75_AdoAdu[Indicator == "sum_inc" & Group == "All"]$UR
optimistic2025_med_10y_75_AdoAdu_mort <- optimistic2025_med_10y_75_AdoAdu[Indicator == "sum_mort" & Group == "All"]$UR
optimistic2025_med_10y_75_AdoAdu_IRR  <- optimistic2025_med_10y_75_AdoAdu[Indicator == "inc_rate" & Group == "All"]$UR
optimistic2025_med_10y_75_AdoAdu_MRR  <- optimistic2025_med_10y_75_AdoAdu[Indicator == "mort_rate" & Group == "All"]$UR
### Routine Only
pessimistic_med_10y_Ado <- epi_estimates[Runtype == "pessimistic_med_10y_PPI_Ado" & Year == 2050 & AgeGrp == "[0,99]"]
pessimistic_med_10y_Ado_tx   <- pessimistic_med_10y_Ado[Indicator == "sum_tx" & Group == "All"]$UR
pessimistic_med_10y_Ado_inc  <- pessimistic_med_10y_Ado[Indicator == "sum_inc" & Group == "All"]$UR
pessimistic_med_10y_Ado_mort <- pessimistic_med_10y_Ado[Indicator == "sum_mort" & Group == "All"]$UR
pessimistic_med_10y_Ado_IRR <- pessimistic_med_10y_Ado[Indicator == "inc_rate" & Group == "All"]$UR
pessimistic_med_10y_Ado_MRR <- pessimistic_med_10y_Ado[Indicator == "mort_rate" & Group == "All"]$UR
# No uncertainty intervals
basecase_adoadu_irr <- paste0(round(basecase_med_10y_AdoAdu[Indicator == "inc_rate" & Group == "All"]$medval*100, 1), "%")
basecase_adoadu_mrr <- paste0(round(basecase_med_10y_AdoAdu[Indicator == "mort_rate" & Group == "All"]$medval*100, 1), "%")
basecase_adoadu_mort <- round((basecase_med_10y_AdoAdu[Indicator == "sum_mort" & Group == "All"]$medval*1000)/1e6,1)
basecase_adoadu_mort_SEAR <- round((basecase_med_10y_AdoAdu[Indicator == "sum_mort" & Group == "SEAR"]$medval*1000)/1e6,1)
basecase_adoadu_mort_AFR <- round((basecase_med_10y_AdoAdu[Indicator == "sum_mort" & Group == "AFR"]$medval*1000)/1e6,1)
optimistic_adoadu_irr <- paste0(round(optimistic2025_med_10y_50_AdoAdu[Indicator == "inc_rate" & Group == "All"]$medval*100, 1), "%")
optimistic_adoadu_mrr <- paste0(round(optimistic2025_med_10y_50_AdoAdu[Indicator == "mort_rate" & Group == "All"]$medval*100, 1), "%")
optimistic_adoadu_mort <- round((optimistic2025_med_10y_50_AdoAdu[Indicator == "sum_mort" & Group == "All"]$medval*1000)/1e6,1)
pessimistic_ado_irr <- paste0(round(pessimistic_med_10y_Ado[Indicator == "inc_rate" & Group == "All"]$medval*100, 1), "%")
pessimistic_ado_mrr <- paste0(round(pessimistic_med_10y_Ado[Indicator == "mort_rate" & Group == "All"]$medval*100, 1), "%")
pessimistic_ado_mort <- round((pessimistic_med_10y_Ado[Indicator == "sum_mort" & Group == "All"]$medval*1000)/1e6,1)
### Base case vs routine only
diff_tx <- round(basecase_med_10y_AdoAdu[Indicator == "sum_tx" & Group == "All"]$medval/
pessimistic_med_10y_Ado[Indicator == "sum_tx" & Group == "All"]$medval, 1)
diff_inc <- round(basecase_med_10y_AdoAdu[Indicator == "sum_inc" & Group == "All"]$medval/
pessimistic_med_10y_Ado[Indicator == "sum_inc" & Group == "All"]$medval, 1)
diff_mort <- round(basecase_med_10y_AdoAdu[Indicator == "sum_mort" & Group == "All"]$medval/
pessimistic_med_10y_Ado[Indicator == "sum_mort" & Group == "All"]$medval, 1)
diff_bc_ro <- c(diff_tx, diff_inc, diff_mort)
# Immediate scale-up 75% vs base case
diff_tx_optim <- round(optimistic2025_med_10y_75_AdoAdu[Indicator == "sum_tx" & Group == "All"]$medval/
basecase_med_10y_AdoAdu[Indicator == "sum_tx" & Group == "All"]$medval, 1)
diff_inc_optim <- round(optimistic2025_med_10y_75_AdoAdu[Indicator == "sum_inc" & Group == "All"]$medval/
basecase_med_10y_AdoAdu[Indicator == "sum_inc" & Group == "All"]$medval, 1)
diff_mort_optim <- round(optimistic2025_med_10y_75_AdoAdu[Indicator == "sum_mort" & Group == "All"]$medval/
basecase_med_10y_AdoAdu[Indicator == "sum_mort" & Group == "All"]$medval, 1)
diff_values_optim <- c(diff_tx_optim, diff_inc_optim, diff_mort_optim)
# Base case: HBC vs. others
diff_tx_HBC <- round(basecase_med_10y_AdoAdu[Indicator == "sum_tx" & Group == "HBC"]$medval/
basecase_med_10y_AdoAdu[Indicator == "sum_tx" & Group == "Other"]$medval, 1)
diff_inc_HBC <- round(basecase_med_10y_AdoAdu[Indicator == "sum_inc" & Group == "HBC"]$medval/
basecase_med_10y_AdoAdu[Indicator == "sum_inc" & Group == "Other"]$medval, 1)
diff_mort_HBC <- round(basecase_med_10y_AdoAdu[Indicator == "sum_mort" & Group == "HBC"]$medval/
basecase_med_10y_AdoAdu[Indicator == "sum_mort" & Group == "Other"]$medval, 1)
diff_values_HBC <- c(diff_tx_HBC, diff_inc_HBC, diff_mort_HBC)
# Rate Reductions
diff_mrr_bc <- round(basecase_med_10y_AdoAdu[Indicator == "mort_rate" & Group == "All"]$medval/
basecase_med_10y_Neo[Indicator == "mort_rate" & Group == "All"]$medval, 1)
diff_irr_bc <- round(basecase_med_10y_AdoAdu[Indicator == "inc_rate" & Group == "All"]$medval/
basecase_med_10y_Neo[Indicator == "inc_rate" & Group == "All"]$medval, 1)
diff_mrr_is <- round(optimistic2025_med_10y_50_AdoAdu[Indicator == "mort_rate" & Group == "All"]$medval/
optimistic2025_med_10y_50_Neo[Indicator == "mort_rate" & Group == "All"]$medval, 1)
diff_irr_is <- round(optimistic2025_med_10y_50_AdoAdu[Indicator == "inc_rate" & Group == "All"]$medval/
optimistic2025_med_10y_50_Neo[Indicator == "inc_rate" & Group == "All"]$medval, 1)
diff_rr <- c(diff_mrr_bc, diff_irr_bc, diff_mrr_is, diff_irr_is)
# Averted numbers of treatments, cases, and deaths
diff_tx_bc <- round(basecase_med_10y_AdoAdu[Indicator == "sum_tx" & Group == "All"]$medval/
basecase_med_10y_Neo[Indicator == "sum_tx" & Group == "All"]$medval, 1)
diff_inc_bc <- round(basecase_med_10y_AdoAdu[Indicator == "sum_inc" & Group == "All"]$medval/
basecase_med_10y_Neo[Indicator == "sum_inc" & Group == "All"]$medval, 1)
diff_mort_bc <- round(basecase_med_10y_AdoAdu[Indicator == "sum_mort" & Group == "All"]$medval/
basecase_med_10y_Neo[Indicator == "sum_mort" & Group == "All"]$medval, 1)
diff_tx_is <- round(optimistic2025_med_10y_50_AdoAdu[Indicator == "sum_tx" & Group == "All"]$medval/
optimistic2025_med_10y_50_Neo[Indicator == "sum_tx" & Group == "All"]$medval, 1)
diff_inc_is <- round(optimistic2025_med_10y_50_AdoAdu[Indicator == "sum_inc" & Group == "All"]$medval/
optimistic2025_med_10y_50_Neo[Indicator == "sum_inc" & Group == "All"]$medval, 1)
diff_mort_is <- round(optimistic2025_med_10y_50_AdoAdu[Indicator == "sum_mort" & Group == "All"]$medval/
optimistic2025_med_10y_50_Neo[Indicator == "sum_mort" & Group == "All"]$medval, 1)
diff_n <- c(diff_tx_bc, diff_inc_bc, diff_mort_bc, diff_tx_is, diff_inc_is, diff_mort_is)
Our findings suggest that introducing a 50% efficacy adolescent/adult vaccine with 10-years protection in the Basecase scenario could reduce tuberculosis incidence and mortality rates in 2050 by `r basecase_med_10y_AdoAdu_IRR` and `r basecase_med_10y_AdoAdu_MRR` respectively compared to the Status Quo No-New-Vaccine baseline (Table 2). The incidence reduction ranged from `r basecase_med_10y_AdoAdu_IRR_AMR` in the WHO Region of the Americas (AMR) to `r basecase_med_10y_AdoAdu_IRR_AFR` in the African region (AFR) (Table 2, Figure 3). Correspondingly, the tuberculosis mortality rate was reduced by `r basecase_med_10y_AdoAdu_MRR_AMR` in AMR to `r basecase_med_10y_AdoAdu_MRR_AFR` in AFR. By income group, impact was slightly higher in low-income countries compared to lower middle-income countries and upper middle-income countries (Table 2, Figure 3).
# Impact Results
Our findings suggest that introducing a 50% efficacy adolescent/adult vaccine with 10-years protection in the Basecase scenario could reduce tuberculosis incidence and mortality rates in 2050 by `r basecase_med_10y_AdoAdu_IRR` and `r basecase_med_10y_AdoAdu_MRR` respectively compared to the Status Quo No-New-Vaccine baseline (Table 2). The incidence reduction ranged from `r basecase_med_10y_AdoAdu_IRR_AMR` in the WHO Region of the Americas (AMR) to `r basecase_med_10y_AdoAdu_IRR_AFR` in the African region (AFR) (Table 2, Figure 3). Correspondingly, the tuberculosis mortality rate was reduced by `r basecase_med_10y_AdoAdu_MRR_AMR` in AMR to `r basecase_med_10y_AdoAdu_MRR_AFR` in AFR. By income group, impact was slightly higher in low-income countries compared to lower middle-income countries and upper middle-income countries (Table 2, Figure 3).
diff_irr_is
diff_mrr_is
optimistic2025_med_10y_50_AdoAdu[Indicator == "mort_rate" & Group == "All"]$medval
optimistic2025_med_10y_50_Neo[Indicator == "mort_rate" & Group == "All"]$medval
0.1587295/0.266835
1/1.7
diff_rr
inv_diff_rr <- 1/diff_rr
inv_diff_rr
round(inv_diff_rr, 1)
round(inv_diff_rr, 2)
inv_diff_n <- 1/diff_n
inv_diff_n <- round(inv_diff_n, 2)
1/0.15
1/0.29
raw_estimates <- fread("../manuscript/plotting_data/raw_epi_output_overtime_batch1.csv")
raw_estimates <- raw_estimates[Year == 2035 & AgeGrp == "[0,99]" & Indicator == "inc_rate" & Group == "All"]
inc_2015 <- 164.1647
# Reduction in 2035 from Immediate Scale up compared to 2015
optimistic_SQ_2035 <- paste0(round((inc_2015 - raw_estimates[Runtype == "optimistic2025_med_10y_PPI_AdoAdu"]$medval)/inc_2015*100, 1),
"% (", round((inc_2015 - raw_estimates[Runtype == "optimistic2025_med_10y_PPI_AdoAdu"]$highval)/inc_2015*100, 1),
"â€“",round((inc_2015 - raw_estimates[Runtype == "optimistic2025_med_10y_PPI_AdoAdu"]$lowval)/inc_2015*100, 1), "%)")
optimistic_SQ_2035_med <- (inc_2015 - raw_estimates[Runtype == "optimistic2025_med_10y_PPI_AdoAdu"]$medval)/inc_2015*100
SQ_is_perc <- round((optimistic_SQ_2035_med/90)*100,1)
basecase_SQ_2035_med <- (inc_2015 - raw_estimates[Runtype == "basecase_med_10y_PPI_AdoAdu"]$medval)/inc_2015*100
SQ_bc_perc <- round((basecase_SQ_2035_med/90)*100,1)
optimistic_SQ_2035_med <- (inc_2015 - raw_estimates[Runtype == "optimistic2025_med_10y_PPI_AdoAdu"]$medval)/inc_2015*100
SQ_is_perc <- round((optimistic_SQ_2035_med/90)*100,0)
basecase_SQ_2035_med <- (inc_2015 - raw_estimates[Runtype == "basecase_med_10y_PPI_AdoAdu"]$medval)/inc_2015*100
SQ_bc_perc <- round((basecase_SQ_2035_med/90)*100,0)
optimistic_ETB_2035_med <- (inc_2015 - raw_endTB[Runtype == "optimistic2025_med_10y_PPI_AdoAdu_endTB"]$medval)/inc_2015*100
raw_endTB <- fread("../manuscript/plotting_data/raw_epi_output_overtime_endTB.csv")
raw_endTB <- raw_endTB[Year == 2035 & AgeGrp == "[0,99]" & Indicator == "inc_rate" & Group == "All"]
optimistic_ETB_2035_med <- (inc_2015 - raw_endTB[Runtype == "optimistic2025_med_10y_PPI_AdoAdu_endTB"]$medval)/inc_2015*100
ETB_is_perc <- round((optimistic_ETB_2035_med/90)*100,0)
basecase_ETB_2035_med <- (inc_2015 - raw_endTB[Runtype == "basecase_med_10y_PPI_AdoAdu_endTB"]$medval)/inc_2015*100
ETB_bc_perc <- round((basecase_ETB_2035_med/90)*100,0)
View(raw_endTB)
View(raw_estimates)
View(raw_estimates)
suppressPackageStartupMessages({
rm(list=ls())
library(here)
library(data.table)
library(xml2)
hivlist <- c("BWA", "CAF", "CIV", "CMR", "GAB", "GHA", "GMB", "GNB",
"GNQ", "GUY", "KEN", "LSO", "MOZ", "MWI", "NAM", "RWA",
"SWZ", "TGO", "TZA", "UGA", "ZAF", "ZMB", "ZWE")
})
# List of countries to create XMLinput for
lmic      <- fread("./countries/scripts_and_data/countryspecificdata/countryspecificdata_all.csv")
countries <- fread("./countries/LMIC_csv/LMIC_emulation.csv")
lmic_rk   <- fread("./countries/LMIC_csv/LMIC_rk.csv")
# Subset the country specific data for the countries you need
lmic <- lmic[Country %in% countries$CountryCode]
lmic_hiv    <- lmic[Country %in% hivlist]
lmic_hiv_rk <- lmic_hiv[Country %in% lmic_rk$CountryCode]
lmic_nonhiv    <- lmic[!(Country %in% hivlist)]
lmic_nonhiv_rk <- lmic_nonhiv[Country %in% lmic_rk$CountryCode]
hiv_xmls_path <- c("HIV_adoadu_10y_endTB.xml")
nonhiv_xmls_path <- c("nonHIV_adoadu_10y_endTB.xml")
hiv_xmls_name <- sub("HIV","", hiv_xmls_path)
nonhiv_xmls_name <- sub("nonHIV","", nonhiv_xmls_path)
# HIV Countries
for (k in 1:length(hiv_xmls_path)){
input_vx       <- read_xml(paste0("./countries/templates/vx_xmlinput/", hiv_xmls_path[k]))
params_output  <- xml_find_all(input_vx, xpath='//output')
params_prog_vx <- xml_find_all(input_vx, xpath='//TB/TB.progression')
params_inf_vx  <- xml_find_all(input_vx, xpath='//TB/TB.infectivity')
params_vx      <- xml_find_all(input_vx, xpath='//VXa/VXa.progression')
params_rk      <- xml_find_all(input_vx, xpath = '//simulation/options')
for (i in 1:nrow(lmic_hiv)){
# get the country specific values from the regular input file
epval    <- lmic_hiv[i,2]
sfrval   <- lmic_hiv[i,3]
kappaval <- lmic_hiv[i,4]
# Replace with country specific values
xml_set_attr(x=xml_find_all(x = params_prog_vx, xpath='TB.parameter[@name = "sfr"]'),
attr = "value", value = sfrval)
xml_set_attr(x=xml_find_all(x = params_prog_vx, xpath='TB.parameter[@name = "kappa"]'),
attr = "value", value = kappaval)
xml_set_attr(x=xml_find_all(x = params_inf_vx, xpath='TB.parameter[@name = "ep"]'),
attr = "value", value = epval)
xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
attr = "years", value = "c(2024:2050)+0.5")
xml_set_attr(xml_find_all(x = input_vx, xpath = '//simulation'),
attr = 'thru.year', value = 2051)
### Econ output in single age groups
# xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
#               attr = "age.group.lower.limits", value = "c(0:80,90)")
# write_xml(input_vx, file = paste0("countries/", lmic_hiv[i,1],"/parameters/XMLinputVx", hiv_xmls_name[k]))
### Epi output in 0, 15 age groups
xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
attr = "age.group.lower.limits", value = "0,15")
write_xml(input_vx, file = paste0("countries/", lmic_hiv[i,1],"/parameters/XMLinputVx_epi", hiv_xmls_name[k]))
}
for (i in 1:nrow(lmic_hiv_rk)){
# get the country specific values from the regular input file
epval    <- lmic_hiv_rk[i,2]
sfrval   <- lmic_hiv_rk[i,3]
kappaval <- lmic_hiv_rk[i,4]
# Replace with country specific values
xml_set_attr(x=xml_find_all(x = params_prog_vx, xpath='TB.parameter[@name = "sfr"]'),
attr = "value", value = sfrval)
xml_set_attr(x=xml_find_all(x = params_prog_vx, xpath='TB.parameter[@name = "kappa"]'),
attr = "value", value = kappaval)
xml_set_attr(x=xml_find_all(x = params_inf_vx, xpath='TB.parameter[@name = "ep"]'),
attr = "value", value = epval)
xml_set_attr(x=xml_find_all(x = params_rk, xpath='numerical.integration'),
attr = "method", value = "rk4")
xml_set_attr(x=xml_find_all(x = params_rk, xpath='numerical.integration'),
attr = "hini", value ="0.1")
xml_set_attr(xml_find_all(x = input_vx, xpath = '//simulation'),
attr = 'thru.year', value = 2051)
xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
attr = "years", value = "c(2024:2050)+0.5")
### Econ output in single age groups
#xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
#             attr = "age.group.lower.limits", value = "c(0:80,90)")
#write_xml(input_vx, file = paste0("countries/", lmic_hiv_rk[i,1],"/parameters/XMLinputVx", hiv_xmls_name[k]))
### Epi output in 0, 15 age groups
xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
attr = "age.group.lower.limits", value = "0,15")
write_xml(input_vx, file = paste0("countries/", lmic_hiv_rk[i,1],"/parameters/XMLinputVx_epi", hiv_xmls_name[k]))
}
}
# Non HIV countries:
for (k in 1:length(nonhiv_xmls_path)){
input_vx       <- read_xml(paste0("./countries/templates/vx_xmlinput/", nonhiv_xmls_path[k]))
params_prog_vx <- xml_find_all(input_vx, xpath='//TB/TB.progression')
params_inf_vx  <- xml_find_all(input_vx, xpath='//TB/TB.infectivity')
params_output  <- xml_find_all(input_vx, xpath='//output')
params_vx      <- xml_find_all(input_vx, xpath='//VXa/VXa.progression')
params_rk      <- xml_find_all(input_vx, xpath = '//simulation/options')
for (i in 1:nrow(lmic_nonhiv)){
# get the country specific values from the regular input file
epval    <- lmic_nonhiv[i,2]
sfrval   <- lmic_nonhiv[i,3]
kappaval <- lmic_nonhiv[i,4]
# replace the XMLinput values with the country specific values
xml_set_attr(x=xml_find_all(x = params_prog_vx, xpath='TB.parameter[@name = "sfr"]'),
attr = "value", value = sfrval)
xml_set_attr(x=xml_find_all(x = params_prog_vx, xpath='TB.parameter[@name = "kappa"]'),
attr = "value", value = kappaval)
xml_set_attr(x=xml_find_all(x = params_inf_vx, xpath='TB.parameter[@name = "ep"]'),
attr = "value", value = epval)
xml_set_attr(x=xml_find_all(params_vx, 'VXa.parameter[@TB.stage ="Ds"]'),
attr = "value", value = 10)
xml_set_attr(x=xml_find_all(params_vx, 'VXa.parameter[@TB.stage ="Dc"]'),
attr = "value", value = 10)
xml_set_attr(x=xml_find_all(params_vx, 'VXa.parameter[@TB.stage ="T"]'),
attr = "value", value = 10)
xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
attr = "years", value = "c(2024:2050)+0.5")
xml_set_attr(xml_find_all(x = input_vx, xpath = '//simulation'),
attr = 'thru.year', value = 2051)
#  xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
#               attr = "age.group.lower.limits", value = "c(0:80,90)")
# write out the xmlinput.xml to the country specific folder
# write_xml(input_vx, file = paste0("countries/", lmic_nonhiv[i,1],"/parameters/XMLinputVx", nonhiv_xmls_name[k]))
### Epi output in 0, 15 age groups
xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
attr = "age.group.lower.limits", value = "0,15")
write_xml(input_vx, file = paste0("countries/", lmic_nonhiv[i,1],"/parameters/XMLinputVx_epi", nonhiv_xmls_name[k]))
}
for (i in 1:nrow(lmic_nonhiv_rk)){
# get the country specific values from the regular input file
epval    <- lmic_nonhiv_rk[i,2]
sfrval   <- lmic_nonhiv_rk[i,3]
kappaval <- lmic_nonhiv_rk[i,4]
# Replace with country specific values
xml_set_attr(x=xml_find_all(x = params_prog_vx, xpath='TB.parameter[@name = "sfr"]'),
attr = "value", value = sfrval)
xml_set_attr(x=xml_find_all(x = params_prog_vx, xpath='TB.parameter[@name = "kappa"]'),
attr = "value", value = kappaval)
xml_set_attr(x=xml_find_all(x = params_inf_vx, xpath='TB.parameter[@name = "ep"]'),
attr = "value", value = epval)
xml_set_attr(x=xml_find_all(x = params_rk, xpath='numerical.integration'),
attr = "method", value = "rk4")
xml_set_attr(x=xml_find_all(x = params_rk, xpath='numerical.integration'),
attr = "hini", value ="0.1")
xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
attr = "years", value = "c(2024:2050)+0.5")
xml_set_attr(xml_find_all(x = input_vx, xpath = '//simulation'),
attr = 'thru.year', value = 2051)
### Econ output in single age groups
#  xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
#              attr = "age.group.lower.limits", value = "c(0:80,90)")
# write_xml(input_vx, file = paste0("countries/", lmic_nonhiv_rk[i,1],"/parameters/XMLinputVx", nonhiv_xmls_name[k]))
### Epi output in 0, 15 age groups
xml_set_attr(x=xml_find_all(params_output, 'detailed.output'),
attr = "age.group.lower.limits", value = "0,15")
write_xml(input_vx, file = paste0("countries/", lmic_nonhiv_rk[i,1],"/parameters/XMLinputVx_epi", nonhiv_xmls_name[k]))
}
}
input_baseline_hiv       <- read_xml("./countries/templates/XMLinput_HIV_baseline_alt_econ.xml")
params_prog_baseline_hiv <- xml_find_all(input_baseline_hiv, xpath='//TB/TB.progression')
params_inf_baseline_hiv  <- xml_find_all(input_baseline_hiv, xpath='//TB/TB.infectivity')
params_output_baseline_hiv   <- xml_find_all(input_baseline_hiv, xpath='//output')
params_rk_baseline_hiv     <- xml_find_all(input_baseline_hiv, xpath = '//simulation/options')
for (i in 1:nrow(lmic_hiv)){
# get the country specific values from the regular input file
epval    <- lmic_hiv[i,2]
sfrval   <- lmic_hiv[i,3]
kappaval <- lmic_hiv[i,4]
# -------- BASELINE ------------------------
# replace the XMLinput values with the country specific values
xml_set_attr(x=xml_find_all(x = params_prog_baseline_hiv, xpath='TB.parameter[@name = "sfr"]'),
attr = "value", value = sfrval)
xml_set_attr(x=xml_find_all(x = params_prog_baseline_hiv, xpath='TB.parameter[@name = "kappa"]'),
attr = "value", value = kappaval)
xml_set_attr(x=xml_find_all(x = params_inf_baseline_hiv, xpath='TB.parameter[@name = "ep"]'),
attr = "value", value = epval)
xml_set_attr(xml_find_all(x = input_baseline_hiv, xpath = '//simulation'),
attr = 'thru.year', value = 2051)
xml_set_attr(x=xml_find_all(params_output_baseline_hiv, 'detailed.output'),
attr = "years", value = "c(2019:2050)+0.5")
## Econ output in single age groups
#  xml_set_attr(x=xml_find_all(params_output_baseline_hiv, 'detailed.output'),
#               attr = "age.group.lower.limits", value = "c(0:80,90)")
#  write_xml(input_baseline_hiv, file = paste0("countries/", lmic_hiv[i,1],"/parameters/XMLinput_econ_endTB.xml"))
## Epi output in age groups
xml_set_attr(x=xml_find_all(params_output_baseline_hiv, 'detailed.output'),
attr = "age.group.lower.limits", value = "0,15")
write_xml(input_baseline_hiv, file = paste0("countries/", lmic_hiv[i,1],"/parameters/XMLinput_epi_endTB.xml"))
}
for (i in 1:nrow(lmic_hiv_rk)){
# get the country specific values from the regular input file
epval    <- lmic_hiv_rk[i,2]
sfrval   <- lmic_hiv_rk[i,3]
kappaval <- lmic_hiv_rk[i,4]
# -------- BASELINE ------------------------
# replace the XMLinput values with the country specific values
xml_set_attr(x=xml_find_all(x = params_prog_baseline_hiv, xpath='TB.parameter[@name = "sfr"]'),
attr = "value", value = sfrval)
xml_set_attr(x=xml_find_all(x = params_prog_baseline_hiv, xpath='TB.parameter[@name = "kappa"]'),
attr = "value", value = kappaval)
xml_set_attr(x=xml_find_all(x = params_inf_baseline_hiv, xpath='TB.parameter[@name = "ep"]'),
attr = "value", value = epval)
xml_set_attr(x=xml_find_all(x = params_rk_baseline_hiv, xpath='numerical.integration'),
attr = "method", value = "rk4")
xml_set_attr(x=xml_find_all(x = params_rk_baseline_hiv, xpath='numerical.integration'),
attr = "hini", value ="0.1")
xml_set_attr(x=xml_find_all(params_output_baseline_hiv, 'detailed.output'),
attr = "years", value = "c(2019:2050)+0.5")
xml_set_attr(xml_find_all(x = input_baseline_hiv, xpath = '//simulation'),
attr = 'thru.year', value = 2051)
## Econ output in single age groups
#  xml_set_attr(x=xml_find_all(params_output_baseline_hiv, 'detailed.output'),
#               attr = "age.group.lower.limits", value = "c(0:80,90)")
#  write_xml(input_baseline_hiv, file = paste0("countries/", lmic_hiv_rk[i,1],"/parameters/XMLinput_econ_endTB.xml"))
## Epi output in age groups
xml_set_attr(x=xml_find_all(params_output_baseline_hiv, 'detailed.output'),
attr = "age.group.lower.limits", value = "0,15")
write_xml(input_baseline_hiv, file = paste0("countries/", lmic_hiv_rk[i,1],"/parameters/XMLinput_epi_endTB.xml"))
}
input_baseline_nonhiv         <- read_xml("./countries/templates/XMLinput_nonHIV_baseline_alt_econ.xml")
params_prog_baseline_nonhiv   <- xml_find_all(input_baseline_nonhiv, xpath='//TB/TB.progression')
params_inf_baseline_nonhiv    <- xml_find_all(input_baseline_nonhiv, xpath='//TB/TB.infectivity')
params_output_baseline_nonhiv <- xml_find_all(input_baseline_nonhiv, xpath='//output')
params_rk_baseline_nonhiv     <- xml_find_all(input_baseline_nonhiv, xpath = '//simulation/options')
for (i in 1:nrow(lmic_nonhiv)){
# get the country specific values from the regular input file
epval    <- lmic_nonhiv[i,2]
sfrval   <- lmic_nonhiv[i,3]
kappaval <- lmic_nonhiv[i,4]
# replace the XMLinput values with the country specific values
xml_set_attr(x=xml_find_all(x = params_prog_baseline_nonhiv, xpath='TB.parameter[@name = "sfr"]'),
attr = "value", value = sfrval)
xml_set_attr(x=xml_find_all(x = params_prog_baseline_nonhiv, xpath='TB.parameter[@name = "kappa"]'),
attr = "value", value = kappaval)
xml_set_attr(x=xml_find_all(x = params_inf_baseline_nonhiv, xpath='TB.parameter[@name = "ep"]'),
attr = "value", value = epval)
xml_set_attr(xml_find_all(x = input_baseline_nonhiv, xpath = '//simulation'),
attr = 'thru.year', value = 2051)
xml_set_attr(x=xml_find_all(params_output_baseline_nonhiv, 'detailed.output'),
attr = "years", value = "c(2019:2050)+0.5")
# Econ output
#  xml_set_attr(x=xml_find_all(params_output_baseline_nonhiv, 'detailed.output'),
#               attr = "age.group.lower.limits", value = "c(0:80,90)")
#  write_xml(input_baseline_nonhiv, file = paste0("countries/",lmic_nonhiv[i,1],"/parameters/XMLinput_econ_endTB.xml"))
# Epi output
xml_set_attr(x=xml_find_all(params_output_baseline_nonhiv, 'detailed.output'),
attr = "age.group.lower.limits", value = "0,15")
# write out the xmlinput.xml to the country specific folder
write_xml(input_baseline_nonhiv, file = paste0("countries/",lmic_nonhiv[i,1],"/parameters/XMLinput_epi_endTB.xml"))
}
for (i in 1:nrow(lmic_nonhiv_rk)){
# get the country specific values from the regular input file
epval    <- lmic_nonhiv_rk[i,2]
sfrval   <- lmic_nonhiv_rk[i,3]
kappaval <- lmic_nonhiv_rk[i,4]
# replace the XMLinput values with the country specific values
xml_set_attr(x=xml_find_all(x = params_prog_baseline_nonhiv, xpath='TB.parameter[@name = "sfr"]'),
attr = "value", value = sfrval)
xml_set_attr(x=xml_find_all(x = params_prog_baseline_nonhiv, xpath='TB.parameter[@name = "kappa"]'),
attr = "value", value = kappaval)
xml_set_attr(x=xml_find_all(x = params_inf_baseline_nonhiv, xpath='TB.parameter[@name = "ep"]'),
attr = "value", value = epval)
xml_set_attr(x=xml_find_all(x = params_rk_baseline_nonhiv, xpath='numerical.integration'),
attr = "method", value = "rk4")
xml_set_attr(x=xml_find_all(x = params_rk_baseline_nonhiv, xpath='numerical.integration'),
attr = "hini", value ="0.1")
xml_set_attr(x=xml_find_all(params_output_baseline_nonhiv, 'detailed.output'),
attr = "years", value = "c(2019:2050)+0.5")
xml_set_attr(xml_find_all(x = input_baseline_nonhiv, xpath = '//simulation'),
attr = 'thru.year', value = 2051)
# Econ output
# xml_set_attr(x=xml_find_all(params_output_baseline_nonhiv, 'detailed.output'),
#              attr = "age.group.lower.limits", value = "c(0:80,90)")
# write_xml(input_baseline_nonhiv, file = paste0("countries/",lmic_nonhiv_rk[i,1],"/parameters/XMLinput_econ_endTB.xml"))
# Epi output
xml_set_attr(x=xml_find_all(params_output_baseline_nonhiv, 'detailed.output'),
attr = "age.group.lower.limits", value = "0,15")
# write out the xmlinput.xml to the country specific folder
write_xml(input_baseline_nonhiv, file = paste0("countries/",lmic_nonhiv_rk[i,1],"/parameters/XMLinput_epi_endTB.xml"))
}
library(data.table)
# Load in the list of LMIC countries
lmic_list <- fread("./countries/LMIC_csv/LMIC_emulation.csv")
infant_simple2025_med  <- fread("./countries/templates/vx_incidence/infant_simple2025_med.txt")
for (i in 1:nrow(lmic_list)){
med_simple  <- infant_simple2025_med
med_simple$country  <- lmic_list[i,2]
write.table(med_simple,  file = paste0("./countries/", lmic_list[i,2],"/data/infant_simple2025_med.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
}
infant_simple2025_low  <- fread("./countries/templates/vx_incidence/infant_simple2025_low.txt")
infant_simple2025_high  <- fread("./countries/templates/vx_incidence/infant_simple2025_high.txt")
for (i in 1:nrow(lmic_list)){
high_simple  <- infant_simple2025_high
high_simple$country  <- lmic_list[i,2]
write.table(high_simple,  file = paste0("./countries/", lmic_list[i,2],"/data/infant_simple2025_high.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
low_simple  <- infant_simple2025_low
low_simple$country  <- lmic_list[i,2]
write.table(low_simple,  file = paste0("./countries/", lmic_list[i,2],"/data/infant_simple2025_low.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
}
adoadu_simple2025_med_prev  <- fread("./countries/templates/vx_incidence/adoadu_simple2025_med_prev.txt")
adoadu_simple2025_med_vac  <- fread("./countries/templates/vx_incidence/adoadu_simple2025_med_vac.txt")
for (i in 1:nrow(lmic_list)){
med_simple_prev  <- adoadu_simple2025_med_prev
med_simple_prev$country  <- lmic_list[i,2]
write.table(med_simple_prev,  file = paste0("./countries/", lmic_list[i,2],"/data/adoadu_simple2025_med_prev.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
med_simple_vac  <- adoadu_simple2025_med_vac
med_simple_vac$country  <- lmic_list[i,2]
write.table(med_simple_vac,  file = paste0("./countries/", lmic_list[i,2],"/data/adoadu_simple2025_med_vac.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
}
adoadu_simple2025_low_prev  <- fread("./countries/templates/vx_incidence/adoadu_simple2025_low_prev.txt")
adoadu_simple2025_low_vac  <- fread("./countries/templates/vx_incidence/adoadu_simple2025_low_vac.txt")
for (i in 1:nrow(lmic_list)){
low_simple_prev  <- adoadu_simple2025_low_prev
low_simple_prev$country  <- lmic_list[i,2]
write.table(low_simple_prev,  file = paste0("./countries/", lmic_list[i,2],"/data/adoadu_simple2025_low_prev.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
low_simple_vac  <- adoadu_simple2025_low_vac
low_simple_vac$country  <- lmic_list[i,2]
write.table(low_simple_vac,  file = paste0("./countries/", lmic_list[i,2],"/data/adoadu_simple2025_low_vac.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
}
adoadu_simple2025_high_prev  <- fread("./countries/templates/vx_incidence/adoadu_simple2025_high_prev.txt")
adoadu_simple2025_high_vac  <- fread("./countries/templates/vx_incidence/adoadu_simple2025_high_vac.txt")
for (i in 1:nrow(lmic_list)){
high_simple_prev  <- adoadu_simple2025_high_prev
high_simple_prev$country  <- lmic_list[i,2]
write.table(high_simple_prev,  file = paste0("./countries/", lmic_list[i,2],"/data/adoadu_simple2025_high_prev.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
high_simple_vac  <- adoadu_simple2025_high_vac
high_simple_vac$country  <- lmic_list[i,2]
write.table(high_simple_vac,  file = paste0("./countries/", lmic_list[i,2],"/data/adoadu_simple2025_high_vac.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
}
setwd("./countries/")
# Load in the list of LMIC countries
lmic_list <- fread("./LMIC_csv/LMIC_emulation.csv")
cs_years <- fread("./scripts_and_data/countryspecificdata/countryspecificdata_Vxyear.csv")
adoadu_scaleup_high_vac  <- fread("./templates/vx_incidence/adoadu_scaleup_high_vac.txt")
adoadu_scaleup_med_vac   <- fread("./templates/vx_incidence/adoadu_scaleup_med_vac.txt")
adoadu_scaleup_low_vac   <- fread("./templates/vx_incidence/adoadu_scaleup_low_vac.txt")
adoadu_scaleup_high_prev <- fread("./templates/vx_incidence/adoadu_scaleup_high_prev.txt")
adoadu_scaleup_med_prev  <- fread("./templates/vx_incidence/adoadu_scaleup_med_prev.txt")
adoadu_scaleup_low_prev  <- fread("./templates/vx_incidence/adoadu_scaleup_low_prev.txt")
for (i in 1:nrow(lmic_list)){
# get the country specific year of introduction
cs_y <- cs_years[CountryCode == lmic_list[i,2], Year]
# Never to Vaccinated - Protected Files
high_vac <- adoadu_scaleup_high_vac
high_vac$country <- lmic_list[i,2] # replace country code
# reassign the YEAR var to be 1 year before country specific vx intro
# and 22 years after (bc that's how many years are in the template file)
high_vac <- high_vac[,YEAR := (cs_y-1):(cs_y+22)]
med_vac <- adoadu_scaleup_med_vac
med_vac$country <- lmic_list[i,2]
med_vac <- med_vac[,YEAR := (cs_y-1):(cs_y+22)]
low_vac <- adoadu_scaleup_low_vac
low_vac$country <- lmic_list[i,2]
low_vac <- low_vac[,YEAR := (cs_y-1):(cs_y+22)]
# restrict the input file to years before 2050
high_vac <- high_vac[YEAR <= 2050,]
med_vac  <- med_vac[YEAR <= 2050,]
low_vac  <- low_vac[YEAR <= 2050,]
write.table(high_vac, file = paste0(lmic_list[i,2],"/data/adoadu_scaleup_high_vac.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
write.table(med_vac, file = paste0(lmic_list[i,2],"/data/adoadu_scaleup_med_vac.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
write.table(low_vac, file = paste0(lmic_list[i,2],"/data/adoadu_scaleup_low_vac.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
# Never to Vaccinated - Unprotected Files
high_prev <- adoadu_scaleup_high_prev
high_prev$country <- lmic_list[i,2]
high_prev <- high_prev[,YEAR := (cs_y-1):(cs_y+22)]
med_prev <- adoadu_scaleup_med_prev
med_prev$country <- lmic_list[i,2]
med_prev <- med_prev[,YEAR := (cs_y-1):(cs_y+22)]
low_prev <- adoadu_scaleup_low_prev
low_prev$country <- lmic_list[i,2]
low_prev <- low_prev[,YEAR := (cs_y-1):(cs_y+22)]
high_prev <- high_prev[YEAR <= 2050,]
med_prev  <- med_prev[YEAR <= 2050,]
low_prev  <- low_prev[YEAR <= 2050,]
write.table(high_prev, file = paste0(lmic_list[i,2],"/data/adoadu_scaleup_high_prev.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
write.table(med_prev, file = paste0(lmic_list[i,2],"/data/adoadu_scaleup_med_prev.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
write.table(low_prev, file = paste0(lmic_list[i,2],"/data/adoadu_scaleup_low_prev.txt"),
row.names=FALSE, sep="\t", quote=FALSE)
}
